// @ts-nocheck
/**
 * This file is generated by 'file2variable-cli'
 * It is not mean to be edited by hand
 */
import { createBlock as _createBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, renderList as _renderList, resolveComponent as _resolveComponent, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives, withKeys as _withKeys } from 'vue'
// tslint:disable
/* eslint-disable */

export function indexTemplateHtml(_ctx, _cache) {
  const _component_relative_time = _resolveComponent("relative-time")

  return (_openBlock(), _createBlock("div", { class: "items" }, [
    _createVNode("div", { class: "operations" }, [
      (_ctx.items.length > 0)
        ? (_openBlock(), _createBlock("button", {
            key: 0,
            onClick: _cache[1] || (_cache[1] = $event => (_ctx.report()))
          }, "report"))
        : _createCommentVNode("v-if", true),
      (_ctx.canClearItems)
        ? (_openBlock(), _createBlock("button", {
            key: 1,
            onClick: _cache[2] || (_cache[2] = $event => (_ctx.clearItems()))
          }, "clear items"))
        : _createCommentVNode("v-if", true),
      (_ctx.items.length > 0)
        ? (_openBlock(), _createBlock("button", {
            key: 2,
            onClick: _cache[3] || (_cache[3] = $event => (_ctx.exportItems()))
          }, "export items"))
        : _createCommentVNode("v-if", true),
      (_ctx.items.length > 0 && _ctx.result && !_ctx.canImport)
        ? (_openBlock(), _createBlock("button", {
            key: 3,
            onClick: _cache[4] || (_cache[4] = $event => (_ctx.importItems()))
          }, "import items"))
        : _createCommentVNode("v-if", true),
      (_ctx.result && !_ctx.canImport)
        ? (_openBlock(), _createBlock("button", {
            key: 4,
            class: "clipboard",
            "data-clipboard-target": "#report-result"
          }, "copy"))
        : _createCommentVNode("v-if", true),
      (_ctx.result && !_ctx.canImport)
        ? (_openBlock(), _createBlock("button", {
            key: 5,
            onClick: _cache[5] || (_cache[5] = $event => (_ctx.clearResult()))
          }, "clear"))
        : _createCommentVNode("v-if", true),
      (_ctx.items.length > 0)
        ? (_openBlock(), _createBlock("button", {
            key: 6,
            class: _ctx.reportDaysIsEditing ? 'expanded' : '',
            onClick: _cache[6] || (_cache[6] = $event => (_ctx.toggleReportDaysVisibility()))
          }, "report days", 2 /* CLASS */))
        : _createCommentVNode("v-if", true),
      (_ctx.items.length > 0)
        ? (_openBlock(), _createBlock("button", {
            key: 7,
            class: _ctx.reportFormatIsEditing ? 'expanded' : '',
            onClick: _cache[7] || (_cache[7] = $event => (_ctx.toggleReportFormatVisibility()))
          }, "report format", 2 /* CLASS */))
        : _createCommentVNode("v-if", true)
    ]),
    (_ctx.reportDaysIsEditing)
      ? _withDirectives((_openBlock(), _createBlock("input", {
          key: 0,
          id: "reportDays",
          "onUpdate:modelValue": _cache[8] || (_cache[8] = $event => (_ctx.reportDays = $event)),
          type: "number"
        }, null, 512 /* NEED_PATCH */)), [
          [_vModelText, _ctx.reportDays]
        ])
      : _createCommentVNode("v-if", true),
    (_ctx.reportFormatIsEditing)
      ? _withDirectives((_openBlock(), _createBlock("input", {
          key: 1,
          id: "reportFormat",
          "onUpdate:modelValue": _cache[9] || (_cache[9] = $event => (_ctx.reportFormat = $event)),
          type: "text"
        }, null, 512 /* NEED_PATCH */)), [
          [_vModelText, _ctx.reportFormat]
        ])
      : _createCommentVNode("v-if", true),
    (_ctx.canImport)
      ? _withDirectives((_openBlock(), _createBlock("textarea", {
          key: 2,
          "onUpdate:modelValue": _cache[10] || (_cache[10] = $event => (_ctx.result = $event)),
          onFocusout: _cache[11] || (_cache[11] = $event => (_ctx.doneEditingResult())),
          rows: "20",
          ref: "result"
        }, "\n    ", 544 /* HYDRATE_EVENTS, NEED_PATCH */)), [
          [_vModelText, _ctx.result]
        ])
      : (_openBlock(), _createBlock("pre", {
          key: 3,
          id: "report-result",
          onClick: _cache[12] || (_cache[12] = $event => (_ctx.clickResult()))
        }, _toDisplayString(_ctx.result), 1 /* TEXT */)),
    _createVNode("ul", null, [
      _createVNode("li", null, [
        _withDirectives(_createVNode("input", {
          "onUpdate:modelValue": _cache[13] || (_cache[13] = $event => (_ctx.newItemContent = $event)),
          onKeyup: _cache[14] || (_cache[14] = _withKeys($event => (_ctx.create()), ["enter"]))
        }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [
          [_vModelText, _ctx.newItemContent]
        ])
      ]),
      (_openBlock(true), _createBlock(_Fragment, null, _renderList(_ctx.items, (item, i) => {
        return (_openBlock(), _createBlock("li", {
          key: i,
          onMouseenter: $event => (_ctx.mouseenter(i)),
          onMouseleave: _cache[18] || (_cache[18] = $event => (_ctx.mouseleave()))
        }, [
          (_ctx.editingIndex === i)
            ? _withDirectives((_openBlock(), _createBlock("input", {
                key: 0,
                "onUpdate:modelValue": _cache[15] || (_cache[15] = $event => (_ctx.editingItemContent = $event)),
                onKeyup: _cache[16] || (_cache[16] = _withKeys($event => (_ctx.doneEditing()), ["enter"])),
                id: "editingItem",
                onFocusout: _cache[17] || (_cache[17] = $event => (_ctx.doneEditing()))
              }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */)), [
                [_vModelText, _ctx.editingItemContent]
              ])
            : (_openBlock(), _createBlock(_Fragment, { key: 1 }, [
                (item.status === 'closed' || item.status === 'done')
                  ? (_openBlock(), _createBlock("del", {
                      key: 0,
                      onClick: $event => (_ctx.edit(i, $event)),
                      class: "content",
                      innerHTML: _ctx.getSpanedContent(item)
                    }, null, 8 /* PROPS */, ["onClick", "innerHTML"]))
                  : (_openBlock(), _createBlock("span", {
                      key: 1,
                      onClick: $event => (_ctx.edit(i, $event)),
                      class: "content",
                      innerHTML: _ctx.getSpanedContent(item)
                    }, null, 8 /* PROPS */, ["onClick", "innerHTML"]))
              ], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)),
          (_ctx.editingIndex !== i)
            ? (_openBlock(), _createBlock("span", {
                key: 2,
                onClick: $event => (_ctx.edit(i)),
                class: item.status
              }, [
                _createTextVNode(_toDisplayString(item.status) + " ", 1 /* TEXT */),
                (item.date)
                  ? (_openBlock(), _createBlock(_Fragment, { key: 0 }, [
                      _createTextVNode(" ( "),
                      _createVNode(_component_relative_time, {
                        time: item.date,
                        locale: _ctx.locale
                      }, null, 8 /* PROPS */, ["time", "locale"]),
                      _createTextVNode(" ) ")
                    ], 64 /* STABLE_FRAGMENT */))
                  : _createCommentVNode("v-if", true)
              ], 10 /* CLASS, PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true),
          (_ctx.canOnIt(i))
            ? (_openBlock(), _createBlock("button", {
                key: 3,
                class: "on-it",
                onClick: $event => (_ctx.onIt(item))
              }, "on it", 8 /* PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true),
          (_ctx.canDone(i))
            ? (_openBlock(), _createBlock("button", {
                key: 4,
                class: "done",
                onClick: $event => (_ctx.done(item))
              }, "done", 8 /* PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true),
          (_ctx.canClose(i))
            ? (_openBlock(), _createBlock("button", {
                key: 5,
                class: "close",
                onClick: $event => (_ctx.close(item))
              }, "close", 8 /* PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true),
          (_ctx.canReopen(i))
            ? (_openBlock(), _createBlock("button", {
                key: 6,
                class: "reopen",
                onClick: $event => (_ctx.reopen(item))
              }, "reopen", 8 /* PROPS */, ["onClick"]))
            : _createCommentVNode("v-if", true)
        ], 40 /* PROPS, HYDRATE_EVENTS */, ["onMouseenter"]))
      }), 128 /* KEYED_FRAGMENT */))
    ])
  ]))
}
/* eslint-enable */
// tslint:enable
